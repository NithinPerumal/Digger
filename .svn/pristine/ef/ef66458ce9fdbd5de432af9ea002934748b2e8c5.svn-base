import java.awt.geom.Point2D;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JFrame;

/**
 * TODO Put here a description of what this class does.
 * 
 * @author weny. Created Oct 30, 2014.
 */
public class DigGame {

	private static final long UPDATE_INTERVAL_MS = 30;
	private long guard_time_interval = 20;
	private int level = 1;
	private Hero hero;
	private Weapon weapon;
	private Hobbin hobbin;
	private int[][] blockList = new int[20][20];
	private AbstractBlock[][] blocks = new AbstractBlock[20][20];
	private ArrayList<Nobbin> monsterList = new ArrayList<>();
	private ArrayList<Hobbin> monsterList1 = new ArrayList<>();
	private ArrayList<Emerald> emeraldList = new ArrayList<>();
	private ArrayList<Dirt> dirtList = new ArrayList<>();
	private ArrayList<GoldBag> bagList = new ArrayList<>();
	public JFrame frame;

	private int Score = 0;

	Runnable Hero = new Runnable() {
		@Override
		public void run() {
			try {
				while (true) {
					Thread.sleep(UPDATE_INTERVAL_MS);
					HeroTimePassed();
					MonsterTimePassed();
					Monster1TimePassed();
					EmearaldTimepassed();
					WeaponTimePassed();
					GoldBagTimePassed();

					kill();

				}
			} catch (InterruptedException exception) {
				// Stop when interrupted
			}
		}
	};

	private Thread thread = new Thread(this.Hero);

	public DigGame() throws IOException {
		this.hero = new Hero(700, 360);
		this.weapon = new Weapon(700, 700, 0, 0);
		this.hobbin = new Hobbin(400, 400);
		this.monsterList.add(new Nobbin(700, 0));
		this.monsterList1.add(new Hobbin(665, 0));
		this.thread.start();
		Initialize();

	}

	@SuppressWarnings("deprecation")
	public void Initialize() throws IOException {

		this.thread.suspend();
		for (int i = 0; i < 20; i++) {
			for (int j = 0; j < 20; j++) {
				this.blockList[i][j] = 0;
			}

		}

		this.monsterList.clear();
		this.monsterList1.clear();
		this.emeraldList.clear();
		this.dirtList.clear();
		this.bagList.clear();

		this.hero.setPosition(360, 700);
		this.weapon.setPosition(900, 900);
		this.monsterList.add(new Nobbin(600, 0));
		this.monsterList1.add(new Hobbin(640, 0));
		String levelString = "src\\Level" + this.level;
		levelConstructor(levelString);
		this.thread.resume();

	}

	public void HeroTimePassed() {
		if (this.hero != null) {
			this.hero.checkEdge();
			this.hero.updatePosition();
			this.hero.freeze();
		}

	}

	public void MonsterTimePassed() {

	}

	public void Monster1TimePassed() {
		for (Hobbin i : monsterList1) {
			i.checkDirect(this.hero.getPosition());
			i.updatePosition();
		}
		for (Dirt d : this.dirtList) {
			for (Hobbin s : this.monsterList1) {
				if (d.getPicked(s)) {
					for (int i = 0; i < 20; i++) {
						for (int j = 0; j < 20; j++) {
							if (blocks[i][j].equals(d)) {
								blocks[i][j] = (new Block(d.x, d.y));
							}
						}
					}
					d.setLocation(1500, 1500);
					
				}
			}
		}

	}

	public void GoldBagTimePassed() {
		for (GoldBag b : bagList) {
			b.checkEdge();
			b.checkUnder(blocks);
			b.updatePosition();
		}
	}

	//
	public void WeaponTimePassed() {
		this.weapon.checkEdge();
		this.weapon.updatePosition();
		for (Emerald e : this.emeraldList) {
			if (e.getPicked(this.weapon)) {
				this.weapon.isDead = true;
				this.weapon.setPosition(1500, 1500);
				this.weapon.setXVelocity(0);
				this.weapon.setYVelocity(0);
//				this.weapon.isDead = false;

			}
		}
		for (Dirt d : this.dirtList) {
			if (d.getPicked(this.weapon)) {
				this.weapon.isDead = true;
				this.weapon.setPosition(1500, 1500);
				this.weapon.setXVelocity(0);
				this.weapon.setYVelocity(0);
//				this.weapon.isDead = false;
			}
		}

	}

	public Hero getHero() {
		return this.hero;
	}

	public Weapon getWeapon() {
		return this.weapon;
	}

	public void kill() {
		for (int k = 0; k < this.getMonster1().size(); k++) {
			if (Math.abs(this.getWeapon().getX()
					- this.getMonster1().get(k).getX()) < 50
					&& Math.abs(this.getWeapon().getY()
							- this.getMonster1().get(k).getY()) < 50) {
				this.getMonster1().get(k).isDead = true;
				this.getMonster1().remove(k);
				// this.getMonster1().set(k, null);
				// this.getMonster1().get(k).setPosition(2100, 2000);
				// this.getMonster1().get(k).updatePosition();

			}
		}
		for (int j = 0; j < this.getMonsters().size(); j++) {
			if (Math.abs(this.getWeapon().getX()
					- this.getMonsters().get(j).getX()) < 50
					&& Math.abs(this.getWeapon().getY()
							- this.getMonsters().get(j).getY()) < 50) {
				this.getMonsters().get(j).isDead = true;
				// this.getMonsters().set(j, null);
				this.getMonsters().remove(j);
				// this.getMonsters().get(j).setPosition(2100, 2000);
				// this.getMonsters().get(j).updatePosition();
			}
		}
		for (int h = 0; h < this.getMonster1().size(); h++) {
			if (Math.abs(this.hero.getX() - this.getMonster1().get(h).getX()) < 40
					&& Math.abs(this.hero.getY()
							- this.getMonster1().get(h).getY()) < 40) {
				this.hero.isDead = true;
				// this.hero = null;
				// this.hero.setPosition(800, 200);
				// this.hero.updatePosition();
			}
		}
		for (int i = 0; i < this.getMonsters().size(); i++) {
			if (Math.abs(this.hero.getX() - this.getMonsters().get(i).getX()) < 50
					&& Math.abs(this.hero.getY()
							- this.getMonsters().get(i).getY()) < 50) {
				this.hero.isDead = true;
				// this.hero = null;
				// this.hero.setPosition(360, 700);
				// this.hero.updatePosition();
			}
		}
		
		for (int bh = 0; bh < this.getBags().size(); bh++) {
			if (Math.abs(this.hero.getX() - this.getBags().get(bh).getX()) < 10
					&& Math.abs(this.hero.getY() - this.getBags().get(bh).getY()) < 10) {
				this.hero.isDead = true;
			}
		}
		
//		for (int c = 0; c < this.getMonsters().size(); c++) {
//		for (int bm1 = 0; bm1 < this.getBags().size(); bm1++) {
//			if (Math.abs(this.getMonsters().get(c).getX() - this.getBags().get(bm1).getX()) < 10
//					&& Math.abs(this.getMonsters().get(c).getY() - this.getBags().get(bm1).getY()) > 50) {
//  				this.getMonsters().get(c).isDead = true;
//			}
//		}
//		}
//		
//		for (int c = 0; c < this.getMonsters().size(); c++) {
//		for (int bm2 =0; bm2 < this.getBags().size(); bm2++) {
//			if (Math.abs(this.getMonster1().get(c).getX() - this.getBags().get(bm2).getX()) < 10
//					&& Math.abs(this.getMonster1().get(c).getY() - this.getBags().get(bm2).getY()) > 50) {
//  				this.getMonsters().get(c).isDead = true;
//			}
//		}
//		}
	}

	public void levelConstructor(String fileName) throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(fileName));
		for (int i = 0; i < 20; i++) {
			String s = reader.readLine();
			for (int j = 0; j < 20; j++) {
				if (s.charAt(j) == '1') {
					this.blockList[j][i] = 1;
					Dirt add = new Dirt(j * 40, i * 40);
					this.dirtList.add(add);
					this.blocks[i][j] = add;

				}

				if (s.charAt(j) == '3') {
					this.blockList[j][i] = 1;
					Emerald toadd = new Emerald(j * 40, i * 40);
					this.emeraldList.add(toadd);
					this.blocks[i][j] = toadd;
				}

				if (s.charAt(j) == '2') {
					this.blockList[j][i] = 1;
					Dirt toadd = new Dirt(j * 40, i * 40);
					this.dirtList.add(toadd);
					this.blocks[i][j] = toadd;

				}

				if (s.charAt(j) == '4') {
					this.blockList[j][i] = 1;
					Block toAdd = new Block(j * 40, i * 40);
					this.bagList.add(new GoldBag(j * 40, i * 40));
					this.blocks[i][j] = toAdd;
				}
			}
		}
		reader.close();
	}

	public int[][] getBlock() {
		return this.blockList;
	}

	public ArrayList<Emerald> getEmerald() {
		return this.emeraldList;
	}

	public ArrayList<Dirt> getDirt() {
		return this.dirtList;
	}

	public ArrayList<Nobbin> getMonsters() {
		return this.monsterList;
	}

	public ArrayList<Hobbin> getMonster1() {
		return this.monsterList1;
	}

	public ArrayList<GoldBag> getBags() {
		return this.bagList;
	}

	public void EmearaldTimepassed() {
		for (Emerald e : this.emeraldList) {
			if (e.getPicked(this.hero)) {
				for (int i = 0; i < 20; i++) {
					for (int j = 0; j < 20; j++) {
						if (blocks[i][j].equals(e)) {
							blocks[i][j] = (new Block(e.x, e.y));
						}
					}
				}
				e.setLocation(1000, 1000);
				this.Score += 100;
				System.out.println(Score);
			}
		}
		for (Dirt d : this.dirtList) {
			if (d.getPicked(this.hero)) {
				for (int i = 0; i < 20; i++) {
					for (int j = 0; j < 20; j++) {
						if (blocks[i][j].equals(d)) {
							blocks[i][j] = (new Block(d.x, d.y));
						}
					}
				}
				d.setLocation(1000, 1000);
			}
		}
	}

	public void setLevel(int i) {
		int a = i;
		if (a < 1) {
			a = 1;
		}
		if (a > 3) {
			a = 3;
		}
		this.level = a;
	}

	public int getLevel() {
		return this.level;
	}
}
